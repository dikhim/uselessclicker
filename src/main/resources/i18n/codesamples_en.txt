//PARAMETER TEMPLATE
//$parameterName:
//parameter body
//parameter body
//
//$nextParameter...
//At the end of a parameter must be 
//empty line
///THIS IS MAX SIZE FOR EACH LINE////

//Toggles////////////////////////////
//Keyboard///////////////////////////
/////////////////////////////////////
$btnInsertKeyName:
Inserts key names
  
Example:
  CONTROL ALT DELETE
will be inserted after pressing corresponding keys

$btnInsertKeyCode:
Inserts a code for press and release key events
  
Example:
  key.press('CONTROL');
  key.press('С');
  key.release('С');
  key.release('CONTROL');
will be inserted after pressing corresponding keys "CONTROL C"

$btnInsertKeyCodeWithDelay:
Inserts a code for events of pressing and releasing keys with delays between events
  
Example:
  system.sleep(200);
  key.press('CONTROL');
  system.sleep(100);
  key.press('С');
  system.sleep(100);
  key.release('С');
  system.sleep(200);
  key.release('CONTROL');
will be inserted after pressing corresponding keys "CONTROL C"

/////////////////////////////////////
//Mouse basics///////////////////////
/////////////////////////////////////
$btnInsertMouseName:
Inserts pressed button names
  
Example:
  LEFT MIDDLE RIGHT
will be inserted after pressing corresponding buttons

$btnInsertMouseClick:
Inserts a code of click
  
Example:
  mouse.click('LEFT');
  mouse.click('RIGHT');
will be inserted after clicking corresponding buttons

$btnInsertMouseClickAt:
Inserts a code of click at a particular point
  
Example:
  mouse.clickAt('LEFT',500,500);
  mouse.clickAt('RIGHT',600,600);
will be inserted after clicking buttons

$btnInsertMouseMove:
Inserts a code of relative mouse movement
  
Example:
  mouse.move(100,-50);
wil be inserted after moving mouse

$btnInsertMouseMoveTo:
Inserts a code of mouse movement at particular point
  
Example:
  mouse.moveTo(200,200);
will be inserted after moving cursor at the particular point

$btnInsertMousePress:
Inserts a code of pressed mouse buttons
  
Example:
  mouse.press('LEFT');
  mouse.press('RIGHT');
will be inserted after pressing corresponding buttons

$btnInsertMousePressAt:
Inserts a code of pressed mouse buttons at the particular point
  
Example:
  mouse.pressAt('LEFT',400,400);
will be inserted after pressing corresponding button at the particular point

$btnInsertMouseRelease:
Inserts a code of released mouse buttons
  
Example:
  mouse.release('LEFT');
will be inserted after releasing corresponding buttons

$btnInsertMouseReleaseAt:
Inserts a code of released mouse buttons at the particular point
  
Example:
  mouse.releaseAt('LEFT',400,400);
will be inserted after releasing corresponding button at the particular point

/////////////////////////////////////
//Mouse//////////////////////////////
/////////////////////////////////////
$btnInsertMouseCode:
Inserts a code of pressed and released mouse buttons
  
Example:
  mouse.pressAt('LEFT',100,0);
  mouse.releaseAt('LEFT',200,0);
will be inserted after pressing and releasing corresponding button

$btnInsertMouseCodeWithDelay:
Inserts a code of pressed and released mouse buttons with delays between events
  
Example:
  system.sleep(200);
  mouse.pressAt('LEFT',100,0);
  system.sleep(200);
  mouse.releaseAt('LEFT',200,0);
  system.sleep(500);
will be inserted after pressing and releasing corresponding button

$btnInsertMouseRelativeCode:
Inserts a code of pressed and releases buttons relative to the last one
  
Example:
  mouse.moveAndPress('LEFT',50,0);
  mouse.moveAndRelease('LEFT',0,0);
will be inserted when the cursor is moved to the right by 50 pixels, pressing and releasing the left mouse button at the same point

$btnInsertMouseWheel:
Inserts a code of a mouse wheel
  
Example:
  mouse.wheel('UP',3);
will be inserted after rotating a mouse wheel

/////////////////////////////////////
//click//////////////////////////////
$btnInsertMouseCodeClick:
Inserts a code of pressed and released mouse buttons with click detection
  
Example:
  mouse.clickAt('LEFT',200,200);
will be inserted after clicking corresponding mouse button

/////////////////////////////////////
///THIS IS MAX SIZE FOR EACH LINE////
/////////////////////////////////////
///RECORDING/////////////////////////
///COMBINED//////////////////////////
/////////////////////////////////////
$btnInsertCombinedLog:
  Activates keyboard and mouse events recording
  
  Recorded events encode into string representation
  
  Recording begins after releasing a control key and stops after pressing one
  Thus, the events of the control key aren't recorded
  You can also use a combination of keys, but you have to take into account that in this case events of the control key will be recorded
  
  The result is guaranteed to include all events of the keyboard, buttons and mouse wheel
  Also, the result is always included mouse movement events preceding and following these events
  The remaining mouse movement events can be filtered by additional options

Example:
  combined.run('unicode','A##D#A##D#A##D#');

$btnCombinedKeys:
  Activate keyboard events recording
  
  k# - key.press(#)
  K# - key.release(#)

$btnCombinedMouseButtons:
  Activate mouse button events recording
  
  l - mouse.press('LEFT')
  L - mouse.release('LEFT')
  r - mouse.press('RIGHT')
  R - mouse.release('RIGHT')
  m - mouse.press('MIDDLE')
  M - mouse.release('MIDDLE')

$btnCombinedMouseWheel:
  Activate mouse wheel events recording
  
  w# - mouse.wheel('DOWN',#)
  W# - mouse.wheel('UP',#)

$btnCombinedAbsolutePath:
  Activate mouse movement events recording in absolute coordinates
  
  A#$ - mouse.moveTo(#,$)

$btnCombinedRelativePath:
  Activate mouse movement events recording in relative coordinates
  
  X#$ - mouse.move(#,$)

$btnCombinedDelays:
  Activate delays between events recording
  
  D# - system.sleep(#)
  S# - system.sleep(#*1000)

$btnCombinedFixRate:
  Enable the fixed rate recording option 
  
  If this option is enabled, the mouse motion events will be "sifted" so that their number per second does not exceed the fixedRate value
    
  This option will help reduce the amount of code by reducing the "quality" of the path

$btnCombinedMinDistance:
  Enable the option with a minimum distance restriction
  
  If this option is enabled, the mouse movement event won't be included in the result if the distance to the previous event is less than the specified minDistance value
  
  This option helps to reduce the amount of code in case you need to accurately and slowly draw a certain contour

$btnCombinedDetectStopPoints:
  Enable the option to вуеусе stop points with the specified stopTime delay
  
  If this option is enabled, the result is guaranteed to get all mouse movement events where the cursor remained at one place more than the specified amount of time
  
  This option helps to fix the recording problems with the fixedRate and minDistance options and guarantees that the important event will not be omitted

$combinedEncodingType:
  Encoding for the result string
  
  unicode - encode result string using unicode characters
  base64 - encode result string using base64 characters
  base64-zip - encode result string using base64 characters and compress
  
  Using unicode characters a string takes less space but can be easily corrupted
  Using base64-zip encoding a string takes less space, but cannot be edited afterwards  

///THIS IS MAX SIZE FOR EACH LINE////
/////////////////////////////////////
////////////TEMPLATES////////////////
/////////////////////////////////////
//////////////MOUSE//////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
$mouse_Click_hint:
mouse.click('');
A mouse button click
  
mouse.click('BTN');
   BTN - button's name
  
The method consists of two calls of pressing and releasing the button:
  press('BTN');
    sleep(pressDelay);
  release('BTN');
    sleep(releaseDelay);

$mouse_clickAt_hint:
mouse.clickAt('',,);
The click the button at the particular point 
  
mouse.clickAt('BTN',x,y);
  BTN - button's name
  x,y - coordinates
  
The method consists of two calls of pressing and releasing the button:
  pressAt('BTN',x,y);
    sleep(pressDelay);
  releaseAt('BTN',x,y);
    sleep(releaseDelay);

$mouse_getMoveDelay_hint:
mouse.getMoveDelay();
Get the mouse movement delay in ms. (moveDelay)
  
  mouse.getMoveDelay():int

$mouse_getMultiplier_hint:
mouse.getMultiplier();
Get the delay multiplier
  
At this number, all delays for the object are multiplied
  
The reciprocal of the speed multiplier
  
  mouse.getMultiplier():float

$mouse_getPressDelay_hint:
mouse.getPressDelay();
Get the mouse button press delay in ms. (pressDelay)
  
  mouse.getPressDelay():int

$mouse_getReleaseDelay_hint:
mouse.getReleaseDelay();
Get the mouse button release delay in ms. (releaseDelay)
  
  mouse.getReleaseDelay():int

$mouse_getSpeed_hint:
mouse.getSpeed();
Get the speed multiplier
  
The reciprocal of the delay multiplier
  
  mouse.getSpeed():float

$mouse_getWheelDelay_hint:
mouse.getWheelDelay();
Get the mouse wheel delay in ms. (wheelDelay)
  
  mouse.getWheelDelay():int

$mouse_getX_hint:
mouse.getX();
Get the 'x' coordinate of the last mouse event
  
  mouse.getX():int

$mouse_getY_hint:
mouse.getY();
Get the 'x' coordinate of the last mouse event
  
  mouse.getY():int

$mouse_move_hint:
mouse.move(0,0);
Move the cursor relative to the coordinates of the last event
  
  mouse.move(dx,dy);
    dx, dy - offsets
  
Method consists of:
  move(dx,dy);
    sleep(moveDelay);

$mouse_moveAndClick_hint:
mouse.moveAndClick('LEFT',0,0);
Move the cursor relative to the coordinates of the last event and click the button
  
mouse.moveAndClick('BTN',dx,dy);
  BTN - button's name
  dx, dy - offsets
  
Method consists of:
  move(dx,dy);
    sleep(moveDelay);
  press('BTN');
    sleep(pressDelay);
  release('BTN');
    sleep(releaseDelay);

$mouse_moveAndPress_hint:
mouse.moveAndPress('LEFT',0,0);
Move the cursor relative to the coordinates of the last event and press the button
  
mouse.moveAndPress('BTN',dx,dy);
  BTN - button's name
  dx, dy - offsets
  
Method consists of:
  move(dx,dy);
    sleep(moveDelay);
  press('BTN');
    sleep(pressDelay);

$mouse_moveAndRelease_hint:
mouse.moveAndRelease('LEFT',0,0);
Move the cursor relative to the coordinates of the last event and release the button
  
mouse.moveAndPress('BTN',dx,dy);
  BTN - button's name
  dx, dy - offsets
  
Method consists of:
  move(dx,dy);
    sleep(moveDelay);
  release('BTN');
    sleep(releaseDelay);

$mouse_moveAndWheel_hint:
mouse.moveAndWheel('DOWN',0,0,0);
Move the cursor relative to the coordinates of the last event and rotate the wheel
  
mouse.moveAndWheel
  (direction, amount, dx, dy);
  direction - UP/DOWN
  amount - an amount of lines
  dx, dy - offsets
  
Method consists of:
  move(dx,dy);
    sleep(moveDelay);
  wheel(direction,amount);
    sleep(wheelDelay);

$mouse_moveTo_hint:
mouse.moveTo(0,0);
Move the cursor to the particular point
  
mouse.moveTo(x,y);
  x, y - coordinates
  
Method consists of:
  moveTo(x,y);
    sleep(moveDelay);

$mouse_press_hint:
mouse.press('LEFT');
Press the mouse button
  
mouse.press('BTN');
  BTN - button's name
  
Method consists of:
  press('BTN');
    sleep(pressDelay);

$mouse_pressAt_hint:
mouse.pressAt('LEFT',0,0);
Move the cursor to the particular point and press the button
  
mouse.pressAt('BTN',x,y);
  BTN - button's name
  x, y - coordinates
  
Method consists of:
  moveTo(x,y);
    sleep(moveDelay);
  press('BTN');
    sleep(pressDelay);

$mouse_release_hint:
mouse.release('LEFT');
Release the mouse button
  
mouse.release('BTN');
  BTN - button's name
  
Method consists of:
  press('BTN');
    sleep(pressDelay);

$mouse_releaseAt_hint:
mouse.releaseAt('LEFT',0,0);
Move the cursor to the particular point and release the button
  
mouse.releaseAt('BTN',x,y);
  BTN - button's name
  x, y - coordinates
  
Method consists of:
  moveTo(x,y);
    sleep(moveDelay);
  release('BTN');
    sleep(releaseDelay);

$mouse_resetDelays_hint:
mouse.resetDelays();
Reset all delays to default values

$mouse_resetMultiplier_hint:
mouse.resetMultiplier();
Reset the delay multiplier to a default value

$mouse_resetSpeed_hint:
mouse.resetSpeed();
Reset the speed multiplier to a default value

$mouse_setDelays_hint:
mouse.setDelays(10);
Set all delays to the specified value
  
mouse.setDelays(int delay)

$mouse_setMoveDelay_hint:
mouse.setMoveDelay(10);
Set the mouse movement delay to the specified value
  
mouse.setMoveDelay(int moveDelay)
  moveDelay - delay

$mouse_setMultiplier_hint:
mouse.setMultiplier(1);
Set the delay multiplier to the specified value
  
The reciprocal of the speed multiplier
  
mouse.setMultiplier(float multiplier)

$mouse_setPressDelay_hint:
mouse.setPressDelay(10);
Set the press delay to the specified value
  
mouse.setPressDelay(pressDelay)
  int pressDelay - delay

$mouse_setReleaseDelay_hint:
mouse.setReleaseDelay(10);
Set the release delay to the specified value
  
mouse.setReleaseDelay(releaseDelay)
  int releaseDelay - delay

$mouse_setSpeed_hint:
mouse.setSpeed(1);
Set the speed multiplier
  
The reciprocal of the delay multiplier

$mouse_setWheelDelay_hint:
mouse.setWheelDelay(10);
Set the wheel delay to the specified value
  
mouse.setWheelDelay(wheelDelay)
  int wheelDelay - delay

$mouse_setX_hint:
mouse.setX(0);
Move the cursor along the 'x' axis to the specified coordinate
  
mouse.setX(x);
  int x - coordinate
  
Method consists of:
  moveTo(x,getY());
    sleep(moveDelay);

$mouse_setY_hint:
mouse.setY(0);
Move the cursor along the 'y' axis to the specified coordinate
  
mouse.setY(y);
  int y - coordinate
  
Method consists of:
  moveTo(x,getY());
    sleep(moveDelay);

$mouse_wheel_hint:
mouse.wheel('DOWN',0);
Rotate the mouse wheel on the specifies number of lines
  
mouse.wheel(direction, amount);
  direction - UP/DOWN
  int amount - the number of lines
  
Method consists of:
  wheel(direction, amount);
    sleep(wheelDelay);

$mouse_wheelAt_hint:
mouse.wheelAt('DOWN',0,0,0);
Rotate the mouse wheel on the specifies number of lines at the particular point
  
mouse.wheelAt
  (direction, amount, x, y);
  
  direction - UP/DOWN
  int amount - a number of lines
  int x, y - coordinates
  
Method consists of:
  moveTo(x,y);
    sleep(moveDelay);
  wheel(direction,amount);
    sleep(wheelDelay);

/////////////////////////////////////
///THIS IS MAX SIZE FOR EACH LINE////
/////////////////////////////////////
////////////KEYBOARD/////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
$key_getMinDelay_hint:
key.getMinDelay();

$key_getMultipliedPressDelay_hint:
key.getMultipliedPressDelay();

$key_getMultipliedReleaseDelay_hint:
key.getMultipliedReleaseDelay();

$key_getMultiplier_hint:
key.getMultiplier();
Get the delay multiplier
  
At this number, all delays for the object are multiplied
  
The reciprocal of the speed multiplier
  
key.getMultiplier():float

$key_getPressDelay_hint:
key.getPressDelay();
Get the key press delay in ms. (pressDelay)
  
key.getPressDelay():int

$key_getReleaseDelay_hint:
key.getReleaseDelay();
Get the mouse button release delay in ms. (releaseDelay)
  
key.getReleaseDelay():int

$key_getSpeed_hint:
key.getSpeed();
Get the speed multiplier
  
The reciprocal of the delay multiplier
  
key.getSpeed():float

$key_isCapsLocked_hint:
key.isCapsLocked();

$key_isNumLocked_hint:
key.isNumLocked();

$key_isPressed_hint:
key.isPressed('CONTROL');
Find out is the specified keys are pressed
  
key.isPressed('KEY1 KEY2'):boolean
  KEY1, KEY2 - key's names

$key_isScrollLocked_hint:
key.isScrollLocked();

$key_perform_hint:
key.perform();

$key_press_hint:
key.press('CONTROL');
Press the specified key
  
key.press('KEY');
  KEY - key's name
  
Method consists of:
  press('KEY');
    sleep(pressDelay);

$key_release_hint:
key.release('CONTROL');
Release the specified key
  
key.release('KEY');
  KEY - key's name
  
The method consists of:
  release('KEY');
    sleep(releaseDelay);

$key_resetDelays_hint:
key.resetDelays();
Reset all delays to default values

$key_resetMultiplier_hint:
key.resetMultiplier();
Reset the delay multiplier to a default value

$key_resetSpeed_hint:
key.resetSpeed();
Reset the speed multiplier to a default value

$key_setDelays_hint:
key.setDelays(10);
Set all delays to the specified value
  
key.setDelays(int delay)

$key_setMinDelay_hint:
key.setMinDelay(10);

$key_setMultiplier_hint:
key.setMultiplier(1);
Set the delay multiplier to the specified value
  
The reciprocal of the speed multiplier
  
key.setMultiplier(float multiplier)

$key_setPressDelay_hint:
key.setPressDelay(10);
Set the press delay to the specified value
  
key.setPressDelay(pressDelay)
  int pressDelay - delay

$key_setReleaseDelay_hint:
key.setReleaseDelay(10);
Set the release delay to the specified value
  
key.setReleaseDelay(releaseDelay)
  releaseDelay - delay

$key_setSpeed_hint:
key.setSpeed(1);
Set the speed multiplier
  
The reciprocal of the delay multiplier

$key_type_hint:
key.type('CONTROL');
Sequentially press and release each specified key
  
key.type('KEY1 KEY2');
  KEY1, KEY2 - key's names
  
Method consists of(fo each key):
  press('KEY');
    sleep(pressDelay);
  release('KEY');
    sleep(releaseDelay);

/////////////////////////////////////
///THIS IS MAX SIZE FOR EACH LINE////
////////////TEMPLATES////////////////
/////////////SYSTEM//////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
$system_sleep_hint:
system.sleep(0);
Pause script running on the specified amount of time in ms.

system.sleep(ms);
  ms - time in ms.

$system_print_hint:
system.print('');
Print the message

$system_println_hint:
system.println('');
Print the message and terminate the line

$system_registerShortcut_hint:
system.registerShortcut('F1','foo');
Register the keyboard shortcut for calling the method
  
system.registerShortcut
    ('KEY2 KEY2','METHOD');
  KEY1, KEY2 - key's names
  METHOD - method's name

$system_getMultiplier_hint:
system.getMultiplier();
Get the delay multiplier
  
At this number, all delays for the object are multiplied
  
The reciprocal of the speed multiplier

$system_getMultipliedDelay_hint:
system.getMultipliedDelay(delay);
Get the multiplied delay

$system_getSpeed_hint:
system.getSpeed();
Get the speed multiplier
  
The reciprocal of the delay multiplier

$system_resetMultiplier_hint:
system.resetMultiplier();
  Reset the delay multiplier to a default value

$system_resetSpeed_hint:
system.resetSpeed();
Reset the speed multiplier to a default value

$system_setMultiplier_hint:
system.setMultiplier(1);
Set the delay multiplier to the specified value
  
The reciprocal of the speed multiplier

$system_setSpeed_hint:
system.setSpeed(1);
Set the speed multiplier
  
The reciprocal of the delay multiplier

/////////////////////////////////////
///THIS IS MAX SIZE FOR EACH LINE////
/////////////////////////////////////
////////////LANGUAGE/////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
/////////////////////////////////////
$language_class_hint:
function Class (path) {
    this.path = path;
    this.echo = function(text){
        return text;
    };
}
The template for the class with the name 'Class'
  
To create an object use the code:
  var obj = new Class('MyClass');
  
To get the field from object:
  var out = obj.path;
  
To call a method from object:
  var out = obj.echo('someText');

$language_functionEcho_hint:
function echo(text){
    return text;
}
The template of a function with a returning value

$language_functionEcho_template:
function echo(text){
    return text;
}

$language_functionVoid_hint:
function 'void'

$language_functionVoid_hint:
function foo(){
    
}
The template for an empty function

$language_functionVoid_template:
function foo(){
    
}

$language_loopForPlus:
loop 'for' i++

$language_loopForPlus_hint:
for(i=0;i<10;i++){
    
}
The template for an increasing loop 'for'

$language_loopForPlus_template:
for(i=0;i<10;i++){
    
}

$language_loopForMinus:
loop 'for' i--

$language_loopForMinus_hint:
for(i=10;i>0;i--){
    
}
The template for a decreasing loop 'for'

$language_loopForMinus_template:
for(i=10;i>0;i--){
    
}

$language_loopWhile:
loop 'while'

$language_loopWhile_hint:
while(true){
    
}
The template for a loop 'while'

$language_loopWhile_template:
while(true){
    
}